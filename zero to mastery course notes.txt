Tailwind documentation: https://tailwindcss.com you can search for things like margin or padding to see the classes 
1: installing tailwind in angular project:

	npm install -d tailwindcss@latest

2: now we have to config tailwindm run this command:

	npx tailwind init

3: in the tailwind.config.js, we gona put : content: ['.src/**/*.{html,ts}']
 this meand that tailwind will check in src folder for tailwind class and remove all css style that is not a tailwind class or (purge css)
4: in style.css we gona ad:
	@tailwind base;
	@tailwind components;
	@tailwind utilities;


Modules 
A module is a box of multiple components and services together that can be reuse, for now we gona create a user module that gona keep everything realted to user with this command:

	ng generate module user

The AppModule is the root module of an app, the module system in angular enable us to import and export group of files, the modules we create should group files by feature.
We can visualize the modules as a hierarchi, the app module import the user module.
There is no limit of the hierarchi length, the user module can also import another module, theose module will be children of the user module.
When we generate components m they will bve automatic registred inside the app module.
Is recomanded to stor modules in dedicated directories
Modules generated with the cli are not registered. We need to import the module into the app module. The User module should we added in the list of imports in the app.module.ts
The common module export components, directives and pipes, ex (*ngIf) is exported by this module.
If we open the app module we will find the BrowserModule. The BrowserModule should always imported in to the root module. So Browser module auto importe the common module by default.

	ng generate component user/auth-modal 

as we see above, the command create a component under the user module, as we saw, components are registered in appModule, we can force he CLI to declare components in a diferent module, in our case in the user module by creating the component in the user module directory. The CLI is smart enough to understant that we want that the component to be declared inside the user module.
If we declare a component inside a module and we need to use the same component inside a diferent module we have to export the specific component in order to make it be accessible by another module.
 
We have single use components like the nav bar wich is used only one time in the app and reusable components wich are used multiple times like buttons. Our Modal component is a reusable component.
When we create a component we gona thing about what we need... what dooes it need(input) and what does it provide(output).
Is a common practice to create a shared module to organise the reusable components.
Authentication Modal  - handle the inner content of the modalm it do not care if the modal has been displayed on the page
Modal - will not handle the inner content, it will focus on the visibility of the modal
Auth-modal is the parent
modal is the chield

Services:
Services are components that help us to manage the sharable methods of a project in order to make them reusable.
The services have a @Injectable decorator wich make them diferent from the normal components,
Most of the time we gona provideIn 'root' wich mean the service is available to all components starting from roo.
In some cases we gona need to specify another path in order to limit the accesibility but it is recomanded that all services to start from root
The services are singletone and an the application start, angular will create one instance of this service autoatically, when we need this service we only have to inject a object of the type of service via constructor of the component in order to get a reference of that singletone instance created and make use of the methods that the service share.
Now we gona create an Id system for the modal in order to control the modal separatly.

Css Problem
Angular did not remplace the custom component we define in our app, instead the template get inserted inside the component tags. The component tag is considered the host element, by injecting a ref object we will get an access to the respective components host element, our main our main objective is to transfer the element from it's current location to the documents root wich is the body tag, before we can move the element we need to grab it.
Since css chield components inherit from the parent component, the only solution to turn around this default behavior is to move the chield component or modal to the root of the app, the way to fix it by moving it to the root dinamically is:
Inside the chield component or modal, we gona import ElementRef in @angular/core, this give us access to the host element of our component. we will inject the ElementRef in to our component in the constructor.
constructor(private element: ElementRef) {}
Then ngOnInit(): void {
 document.body.appendChild(this.element.nativeElement);
}

Tabs:










	
	